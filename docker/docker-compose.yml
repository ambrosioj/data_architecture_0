version: "3"
services:
  mongodb:
    hostname: mongodb
    image : mongo
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all"]
    container_name: mongodb
    volumes:
    - ./mongo/:/data/db
    ports:
    - 27017:27017
    restart: unless-stopped
    networks:
      - docker-stack
  postgres:
    container_name: ${CONTAINER_NAME}
    image: 'postgres:${PG_VER}'
    hostname: ${HOSTNAME}
    ports:
      - "5432:${PORT}"
    environment:
      TZ: ${TZ_SET}
      restart: always
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_SRC_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}  
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./scripts:/scripts
    networks:
      - docker-stack
  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    platform: linux/amd64
    ports:
      - "3000:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: ${POSTGRES_DB}
      MB_DB_PORT: ${PORT}
      MB_DB_USER: ${POSTGRES_USER}
      MB_DB_PASS: ${POSTGRES_SRC_PASSWORD}
      MB_DB_HOST: ${HOSTNAME}
    depends_on: 
      postgres:
        condition: service_healthy
    networks:
      - docker-stack
  mysql:
    build:
      context: ./mysql
    restart: always
    environment:
      - MYSQL_DATABASE=${MY_DB_NAME}
      - MYSQL_USER=${MY_DB_USER}
      - MYSQL_PASSWORD=${MY_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MY_DB_ROOT_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./mysql/data:/var/lib/mysql 
    networks:
      - docker-stack
  adminer:
    image: adminer:latest
    ports:
    - 8085:8080/tcp
    deploy:
     restart_policy:
       condition: on-failure
    networks:
      - docker-stack      
  minio:
    hostname: minio
    image: 'minio/minio:RELEASE.2021-01-08T21-18-21Z'
    container_name: minio
    ports:
      - '9000:9000'
    volumes:
      - ./minio-data:/data
    environment:
      MINIO_ACCESS_KEY: ${ACCESS_KEY}
      MINIO_SECRET_KEY: ${SECRET_KEY}
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - docker-stack
  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    networks:
      - docker-stack  
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:${MINIO_PORT} ${ACCESS_KEY} ${SECRET_KEY};
      /usr/bin/mc mb myminio/${DATA_REPO_BUCKET_NAME};
      /usr/bin/mc policy set public myminio/${DATA_REPO_BUCKET_NAME};
      exit 0;
      "
  spark:
    build: ./spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - 8080:8080
      - 7077:7077
      - 4041:4041
    networks:
      - docker-stack
  spark-worker:
    build: ./spark
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
      - docker-stack
  pyspark-notebook:
    build:
      context: ./spark/
      dockerfile: Dockerfile-notebook
    working_dir: /home/$USER/work
    user: root
    ports:
      - 8888:8888
    volumes:
       - $PWD/work:/home/$USER/work
    environment:
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - JUPYTER_TOKEN=${JUPYTER_TOKEN}
      - NB_USER=${USER}
      - CHOWN_HOME=yes
      - JUPYTER_ENABLE_LAB=yes
      - GRANT_SUDO=yes
      - NB_UID=1000
      - NB_GID=100
      - NB_GROUP=staff
    networks:
      - docker-stack

networks:
  docker-stack: